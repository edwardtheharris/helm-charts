###
# ```{rubric} Prometheus Values
# ```
# ---
# Default values for prometheus.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#
# ```{rubric} RBAC and PSP
# ```
# ---
# Role based access control and pod security policy.
#
# ```{code-block} yaml
# :caption: example pull secrets
# imagePullSecrets:
# - name: "image-pull-secret"
# ```
#
# ```{literalinclude} /charts/prometheus/values.yaml
# :start-at: "imagePullSecrets: []\n"
# :language: yaml
# :end-before: "###\n"
# ```
imagePullSecrets: []
rbac:
  create: true

###
# ```{rubric} Service Account
# ```
# ---
# Define serviceAccount names for components. Defaults to component's
# fully qualified name.
#
# ````{rubric} Token Automount
# ````
# Opt out of automounting Kubernetes API credentials.
#
# It will be overriden by `server.automountServiceAccountToken`{l=yaml} value,
# if set.
#
# ```{code-block} yaml
# :caption: automount token
# automountServiceAccountToken: false
# ```
#
# ```{rubric} commonMetaLabels
# ```
#
# Additional labels to attach to all resources
#
# ```{literalinclude} /charts/prometheus/values.yaml
# :caption: values
# :language: yaml
# :start-at: "serviceAccountsServer:\n"
# :end-before: "###\n"
# ```
serviceAccountsServer:
  create: true
  name: prometheus
  annotations: {}
commonMetaLabels: {}

###
# ```{rubric} ConfigMap Reload
# ```
# ---
# Monitors ConfigMap changes and POSTs to a URL. More information
# is available
# [here](https://github.com/prometheus-operator/prometheus-operator/tree/main/cmd/prometheus-config-reloader).
#
#
# ```{rubric} env
# ```
#
# `env`{l=yaml} sets environment variables to pass to the container.
# Can be set as name/value pairs,
# read from secrets or configmaps.
#
# ```{code-block} yaml
# :caption: env var example
#
# env:
# - name: SOMEVAR
#   value: somevalue
# - name: PASSWORD
#   valueFrom:
#     secretKeyRef:
#       name: mysecret
#       key: password
#       optional: false
# ```
#
# ```{rubric} reloadUrl
# ```
#
# URL for configmap-reload to use for reloads
#
# ```{code-block} yaml
# :caption: `extraVolumeMounts`{l=yaml} example
# - name: prometheus-alerts
#   mountPath: /etc/alerts.d
#   subPath: ""
#   configMap: prometheus-alerts
#   readOnly: true
# ```
#
# ```{literalinclude} /charts/prometheus/values.yaml
# :caption: configmapReload values
# :language: yaml
# :start-at: "configmapReload:\n"
# :end-before: "###\n"
# ```
configmapReload:
  reloadUrl: ""
  env: []
  prometheus:
    enabled: true
    name: configmap-reload
    # configmap-reload container image
    image:
      repository: quay.io/prometheus-operator/prometheus-config-reloader
      tag: v0.76.0
      digest: ""
      pullPolicy: IfNotPresent
    containerPort: 8080
    containerPortName: metrics
    extraArgs: {}
    extraVolumeDirs: []
    extraVolumeMounts: []
    extraConfigmapMounts: []
    containerSecurityContext: {}
    livenessProbe:
      httpGet:
        path: /healthz
        port: metrics
        scheme: HTTP
      periodSeconds: 10
      initialDelaySeconds: 2
    readinessProbe:
      httpGet:
        path: /healthz
        port: metrics
        scheme: HTTP
      periodSeconds: 10
    startupProbe:
      enabled: false
      httpGet:
        path: /healthz
        port: metrics
        scheme: HTTP
      periodSeconds: 10
    resources: {}

###
# ```{rubric} Prometheus Server
# ```
# ---
# Configuration for the Prometheus server.
#
# ```{rubric} releaseNamespace
# ```
# Enable only the release namespace for monitoring.
# By default all namespaces are monitored.
# If releaseNamespace and namespaces are both set a merged list will be
# monitored.
#
# ```{rubric} SA Token Auto Mount
# ```
# Opt out of automounting Kubernetes API credentials.
#
# If set it will override
# `serviceAccountsServer.automountServiceAccountToken`{l=yaml} value for
# ServiceAccount.
#
# `automountServiceAccountToken: false`{l=yaml}
#
# ````{rubric} ClusterRole/Binding
# ````
# Use a ClusterRole (and ClusterRoleBinding)
# - If set to false
#   - we define a RoleBinding in the defined namespaces ONLY
#
# ```{note}
# because we need a Role with nonResourceURL's ("/metrics")
# you must get someone with Cluster-admin privileges to define this role
# for you, before running with this setting enabled.
#
# This makes prometheus work
# for users who do not have ClusterAdmin privs, but wants prometheus to
# operate on their own namespaces, instead of clusterwide.
# ```
#
# You MUST also set namespaces to the ones
# you have access to and want monitored by Prometheus.
#
# `useExistingClusterRoleName: nameofclusterrole`{l=yaml}
#
# If set it will override prometheus.server.fullname
# value for ClusterRole and ClusterRoleBinding
#
# ````{rubric} Namespaces
# ````
# namespaces to monitor (instead of monitoring all clusterwide).
#
# Needed if you want to run without Cluster-admin privileges.
# ```{code-block} yaml
# namespaces:
#   - yournamespace
# ```
#
# ````{rubric} sidecarContainers
# ````
# add more containers to prometheus server
#
# Key/Value where Key is the sidecar
# `- name: <Key>`{l=yaml}
#
# ```{code-block} yaml
# :caption: Example
#   sidecarContainers:
#      webServer:
#        image: nginx
# ```
#
# OR for adding OAuth authentication to Prometheus
#
# ```{code-block} yaml
# :caption: OAuth Example
#
#   sidecarContainers:
#     oauth-proxy:
#       image: quay.io/oauth2-proxy/oauth2-proxy:v7.1.2
#       args:
#       - --upstream=http://127.0.0.1:9090
#       - --http-address=0.0.0.0:8081
#       - ...
#       ports:
#       - containerPort: 8081
#         name: oauth-proxy
#         protocol: TCP
#       resources: {}
# ```
#
# `sidecarTemplateValues`{l=yaml}
#   - context to be used in template for sidecarContainers
#     - Example:
#
#       ```{code-block} yaml
#       sidecarTemplateValues: *your-custom-globals
#       sidecarContainers:
#       webserver: |-
#         {{ include "webserver-container-template" . }}
#       ```
#   - Template for `webserver-container-template` might looks like this:
#   image: "{{ .Values.server.sidecarTemplateValues.repository }}:{{ .Values.server.sidecarTemplateValues.tag }}"
#   ...
#
# ````{rubric} EnableServiceLinks
# ````
# - indicates whether information about services should be injected
#   into pod's environment variables, matching the syntax of Docker links.
#
# - ```{warning}
#   the field is unsupported and will be skipped in K8s prior to v1.13.0.
#   ```
#
# ````{rubric} prefixURL
# ````
# - The URL prefix at which the container can be accessed.
#   - Useful in the case the `-web.external-url` includes a slug
#     so that the various internal URLs are still able to access as
#     they are in the default case.
# - (Optional)
#   - External URL which can access prometheus
#   - Maybe same with Ingress host name
#
# ````{rubric} env
# ````
# - Additional server container environment variables
#
# - You specify this manually like you would a raw deployment manifest.
# - This means you can bind in environment variables from secrets.
#
#    ```{code-block} yaml
#    :caption: e.g. static environment variable
#
#    - name: DEMO_GREETING
#      value: "Hello from the environment"
#    ```
#
#    ```{code-block} yaml
#    :caption: e.g. secret environment variable
#
#    - name: USERNAME
#      valueFrom:
#        secretKeyRef:
#          name: mysecret
#          key: username
#    ```
#
# ````{rubric} defaultFlagsOverride
# ````
# - List of flags to override default parameters, e.g:
# - ```{code-block} yaml
#   :caption: defaultFlagsOverride example
#
#   defaultFlagsOverride:
#     - --enable-feature=agent
#     - --storage.agent.retention.max-time=30m
#     - --config.file=/etc/config/prometheus.yml
#   ```
#
# ````{rubric} extraFlags
# ````
# - extra flagss to pass to prometheus
#
#   - `web.enable-admin-api`{l=shell} flag controls access to the
#     administrative HTTP API which includes functionality such as
#     deleting time series.
#     This is disabled by default.
#   - `storage.tsdb.no-lockfile`{l=shell} flag controls BD locking
#   - `storage.tsdb.wal-compression`{l=shell} flag enables compression of the
#     write-ahead log (WAL)
#
#     ```{code-block} yaml
#     :caption: extraFlags example
#     extraFlags:
#     - web.enable-admin-api
#     - storage.tsdb.no-lockfile
#     - storage.tsdb.wal-compression
#     ```
#
# ````{rubric} probeHeaders
# ````
# - Custom HTTP headers for Liveness/Readiness/Startup Probe
#
# - Useful for providing HTTP Basic Auth to healthchecks
#
#   ```{code-block} yaml
#   :caption: probeHeaders example
#
#   probeHeaders:
#   - name: "Authorization"
#     value: "Bearer ABCDEabcde12345"
#   ```
#
# ````{rubric} Anti Affinity
# ````
# - Pod anti-affinity can prevent the scheduler from placing
#   Prometheus server replicas on the same node.
# - The value "soft" means that the scheduler should *prefer* to
#   not schedule two replica pods onto the same node but no guarantee is provided.
#
# - The value "hard" means that the scheduler is *required* to not
#   schedule two replica pods onto the same node.
#
# - The default value "" will disable pod anti-affinity so that no
#   anti-affinity rules will be configured (unless set in `server.affinity`).
#
#   ```{literalinclude} /charts/prometheus/values.yaml
#   :language: yaml
#   :start-at: "server:\n"
#   :end-before: "###\n"
#   ```
server:
  name: prometheus
  releaseNamespace: false
  sidecarContainers: {}
  sidecarTemplateValues: {}
  image:
    repository: quay.io/prometheus/prometheus
    # if not set appVersion field from
    # Chart.yaml is used
    tag: ""
    digest: ""
    pullPolicy: IfNotPresent
  command: []
  priorityClassName: ""
  enableServiceLinks: true
  prefixURL: "/"
  baseURL: "prometheus.breeze-blocks.net"
  env: []
  extraFlags:
    - web.enable-lifecycle
    - web.enable-admin-api
    - storage.tsdb.no-lockfile
    - storage.tsdb.wal-compression
  configPath: /etc/config/prometheus.yml
  storagePath: ""
  global:
    scrape_interval: 1m
    scrape_timeout: 10s
    evaluation_interval: 1m
  remoteWrite: []
  remoteRead: []
  tsdb: {}
  exemplars: {}
  probeHeaders: []
  extraArgs: {}
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  extraHostPathMounts: []
  extraConfigmapMounts: []
  extraSecretMounts: []
  fullnameOverride: prometheus
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/default-backend: prometheus
    extraLabels: {}
    hosts:
      - "prometheus.breeze-blocks.net"
    path: /
    pathType: Prefix
    tls:
      - secretName: prometheus-tls
        hosts:
          - prometheus.breeze-blocks.net
  strategy:
    type: Recreate
  hostAliases: []
  tolerations: []
  nodeSelector:
    kubernetes.io/os: linux
  affinity: {}
  podAntiAffinity: ""
  podAntiAffinityTopologyKey: ""
  topologySpreadConstraints: []
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  persistentVolume:
    enabled: true
    statefulSetNameOverride: prometheus
    accessModes:
      - ReadWriteOnce
    labels: {}
    annotations: {}
    mountPath: /data
    size: 10Gi
    storageClass: csi-lvm-linear
    volumeBindingMode: Filesystem
    subPath: ""
  emptyDir:
    sizeLimit: ""
  podAnnotations: {}
  podLabels: {}
  alertmanagers: []
  replicaCount: 1
  revisionHistoryLimit: 10
  configMapAnnotations: {}
  deploymentAnnotations: {}
  statefulSet:
    enabled: true
    annotations: {}
    labels: {}
    podManagementPolicy: OrderedReady
    # Alertmanager headless service to use for the statefulset
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
      gRPC:
        enabled: true
        servicePort: 9091
    pvcDeleteOnStsDelete: false
    pvcDeleteOnStsScale: false
  tcpSocketProbeEnabled: false
  probeScheme: HTTP
  readinessProbeInitialDelay: 30
  readinessProbePeriodSeconds: 5
  readinessProbeTimeout: 4
  readinessProbeFailureThreshold: 3
  readinessProbeSuccessThreshold: 1
  livenessProbeInitialDelay: 30
  livenessProbePeriodSeconds: 15
  livenessProbeTimeout: 10
  livenessProbeFailureThreshold: 3
  livenessProbeSuccessThreshold: 1
  startupProbe:
    enabled: false
    periodSeconds: 5
    failureThreshold: 30
    timeoutSeconds: 10
  resources:
    limits:
      cpu: 2
      memory: 2048Mi
    requests:
      cpu: 1
      memory: 512Mi
  hostNetwork: false
  dnsPolicy: ClusterFirst
  portName: ""
  securityContext:
    runAsUser: 0
    runAsNonRoot: false
    runAsGroup: 0
    fsGroup: 0
  containerSecurityContext: {}
  service:
    enabled: true
    annotations: {}
    labels: {}
    clusterIP: ""
    externalIPs:
      - 192.168.5.50
    loadBalancerSourceRanges:
      - "192.168.5.0/24"
      - "127.0.0.0/8"
    servicePort: 80
    sessionAffinity: None
    type: LoadBalancer
    gRPC:
      enabled: true
      servicePort: 9091
    statefulsetReplica:
      enabled: true
      replica: 1
    additionalPorts:
      - name: authenticated
        port: 8081
        targetPort: 8081
  terminationGracePeriodSeconds: 300
  retention: "15d"

###
# ```{rubric} Prometheus Config
# ```
# ---
# Prometheus server ConfigMap entries for rule files
# (allow prometheus labels interpolation)
#
# Prometheus server ConfigMap entries for scrape_config_files
# (allows scrape configs defined in additional files)
#
# ```{literalinclude} /charts/prometheus/values.yaml
# :start-at: "ruleFiles: {}\n"
# :end-before: "###\n"
# :language: yaml
# ```
ruleFiles: {}
scrapeConfigFiles: []

###
# ```{rubric} Server ConfigMaps
# ```
# ---
# Prometheus server ConfigMap entries
#
# ```{literalinclude} /charts/prometheus/values.yaml
# :start-at: "serverFiles:\n"
# :language: yaml
# :end-before: "###\n"
# ```
serverFiles:
  alerting_rules.yml: {}
  recording_rules.yml: {}
  prometheus.yml:
    rule_files:
      - /etc/config/recording_rules.yml
      - /etc/config/alerting_rules.yml
    scrape_configs:
      - job_name: prometheus
        static_configs:
          - targets:
              - prometheus.breeze-blocks.net:9090

        ###
        # ```{rubric} api servers scrape config
        # ```
        #
        # A scrape configuration for running Prometheus on a Kubernetes cluster.
        # This uses separate scrape configs for cluster components (i.e. API server, node)
        # and services to allow each to use different authentication configs.
        #
        # Kubernetes labels will be added as Prometheus labels on metrics via the
        # `labelmap` relabeling action.
        #
        # Scrape config for API servers.
        #
        # Kubernetes exposes API servers as endpoints to the default/kubernetes
        # service so this uses `endpoints` role and uses relabelling to only keep
        # the endpoints associated with the default/kubernetes service using the
        # default named port `https`. This works for single API server deployments as
        # well as HA API server deployments.
        #
        # ```{literalinclude} /charts/prometheus/values.yaml
        # :start-at: "      - job_name: \"kubernetes-apiservers\"\n"
        # :end-before: "####\n"
        # :language: yaml
        # ```
      - job_name: "kubernetes-apiservers"
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels:
              [
                __meta_kubernetes_namespace,
                __meta_kubernetes_service_name,
                __meta_kubernetes_endpoint_port_name,
              ]
            action: keep
            regex: default;kubernetes;https
      - job_name: "kubernetes-nodes"
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics
      - job_name: "kubernetes-nodes-cadvisor"
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
        ####

        ###
        # ```{rubric} Scrape config for service endpoints
        # ```
        #
        # The relabeling allows the actual service scrape endpoint to be configured
        # via the following annotations:
        #
        # - `prometheus.io/scrape`: Only scrape services that have a value of
        # `true`, except if `prometheus.io/scrape-slow` is set to `true` as well.
        # - `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
        # to set this to `https` & most likely set the `tls_config` of the scrape config.
        # - `prometheus.io/path`: If the metrics path is not `/metrics` override this.
        # - `prometheus.io/port`: If the metrics are exposed on a different port to the
        # service then set this appropriately.
        # - `prometheus.io/param_<parameter>`: If the metrics endpoint uses parameters
        # then you can set any parameter
        #
        # ```{literalinclude} /charts/prometheus/values.yaml
        # :start-at: "      - job_name: \"kubernetes-service-endpoints\"\n"
        # :end-before: "####\n"
        # :language: yaml
        # ```
      - job_name: "kubernetes-service-endpoints"
        honor_labels: true
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
            action: drop
            regex: true
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              [
                __address__,
                __meta_kubernetes_service_annotation_prometheus_io_port,
              ]
            action: replace
            target_label: __address__
            regex: (.+?)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: service
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node
        ####

        ###
        # ```{rubric} Slow Service Scrape Config
        # ```
        # ---
        # Scrape config for slow service endpoints; same as above, but with a larger
        # timeout and a larger interval
        #
        # The relabeling allows the actual service scrape endpoint to be configured
        # via the following annotations:
        #
        # - `prometheus.io/scrape-slow:`: Only scrape services that have a value of `true`
        # - `prometheus.io/scheme`: If the metrics endpoint is secured then
        #   you will need
        #   to set this to `https` & most likely set the `tls_config` of the
        #   scrape config.
        # - `prometheus.io/path`: If the metrics path is not `/metrics` override this.
        # - `prometheus.io/port`: If the metrics are exposed on a different port to the
        # service then set this appropriately.
        # - `prometheus.io/param_<parameter>`: If the metrics endpoint uses parameters
        # then you can set any parameter
        #
        # ```{literalinclude} /charts/prometheus/values.yaml
        # :start-at: "      - job_name: \"kubernetes-service-endpoints-slow\"\n"
        # :end-before: "####\n"
        # :language: yaml
        # ```
      - job_name: "kubernetes-service-endpoints-slow"
        honor_labels: true
        scrape_interval: 5m
        scrape_timeout: 30s
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
            action: keep
            regex: true
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              [
                __address__,
                __meta_kubernetes_service_annotation_prometheus_io_port,
              ]
            action: replace
            target_label: __address__
            regex: (.+?)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: service
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node
      - job_name: "prometheus-pushgateway"
        honor_labels: true
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: pushgateway
        ####

        ###
        # ```{rubric} Service Scrape Config
        # ```
        # ---
        # Example scrape config for probing services via the Blackbox Exporter.
        #
        # The relabeling allows the actual service scrape endpoint to be configured
        # via the following annotations:
        #
        # - `prometheus.io/probe`: Only probe services that have a value of `true`
        #
        # ```{literalinclude} /charts/prometheus/values.yaml
        # :start-at: "      - job_name: \"kubernetes-services\"\n"
        # :end-before: "####\n"
        # :language: yaml
        # ```
      - job_name: "kubernetes-services"
        honor_labels: true
        metrics_path: /probe
        params:
          module: [http_2xx]
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: service
        ####

        ###
        # ```{rubric} Pod Scrape Config
        # ```
        # ---
        # Example scrape config for pods
        #
        # The relabeling allows the actual pod scrape endpoint to be configured via the
        # following annotations:
        #
        # - `prometheus.io/scrape`: Only scrape pods that have a value of `true`,
        # except if `prometheus.io/scrape-slow` is set to `true` as well.
        # - `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
        # to set this to `https` & most likely set the `tls_config` of the scrape config.
        # - `prometheus.io/path`: If the metrics path is not `/metrics` override this.
        # - `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
        #
        # ```{literalinclude} /charts/prometheus/values.yaml
        # :start-at: "      - job_name: \"kubernetes-pods\""
        # :end-before: "####\n"
        # :language: yaml
        # ```
      - job_name: "kubernetes-pods"
        honor_labels: true
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels:
              [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
            action: drop
            regex: true
          - source_labels:
              [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
            action: replace
            regex: (https?)
            target_label: __scheme__
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              [
                __meta_kubernetes_pod_annotation_prometheus_io_port,
                __meta_kubernetes_pod_ip,
              ]
            action: replace
            regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
            replacement: "[$2]:$1"
            target_label: __address__
          - source_labels:
              [
                __meta_kubernetes_pod_annotation_prometheus_io_port,
                __meta_kubernetes_pod_ip,
              ]
            action: replace
            regex: (\d+);((([0-9]+?)(\.|$)){4})
            replacement: $2:$1
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_phase]
            regex: Pending|Succeeded|Failed|Completed
            action: drop
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node
        ####

        ###
        # ```{rubric} Scrape Slow Pods
        # ```
        # ---
        # Example Scrape config for pods which should be scraped slower. An useful example
        # would be stackriver-exporter which queries an API on every scrape of the pod
        #
        # The relabeling allows the actual pod scrape endpoint to be configured via the
        # following annotations:
        #
        # - `prometheus.io/scrape-slow`: Only scrape pods that have a value of `true`
        # - `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
        # to set this to `https` & most likely set the `tls_config` of the scrape config.
        # - `prometheus.io/path`: If the metrics path is not `/metrics` override this.
        # - `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
        #
        # ```{literalinclude} /charts/prometheus/values.yaml
        # :start-at: "      - job_name: \"kubernetes-pods-slow\""
        # :end-before: "####\n"
        # :language: yaml
        # ```
      - job_name: "kubernetes-pods-slow"
        honor_labels: true
        scrape_interval: 5m
        scrape_timeout: 30s
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
            action: keep
            regex: true
          - source_labels:
              [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
            action: replace
            regex: (https?)
            target_label: __scheme__
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              [
                __meta_kubernetes_pod_annotation_prometheus_io_port,
                __meta_kubernetes_pod_ip,
              ]
            action: replace
            regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
            replacement: "[$2]:$1"
            target_label: __address__
          - source_labels:
              [
                __meta_kubernetes_pod_annotation_prometheus_io_port,
                __meta_kubernetes_pod_ip,
              ]
            action: replace
            regex: (\d+);((([0-9]+?)(\.|$)){4})
            replacement: $2:$1
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_phase]
            regex: Pending|Succeeded|Failed|Completed
            action: drop
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node
          ####

###
# ```{rubric} Additional Promethes Config
# ```
# ---
# adds additional scrape configs to prometheus.yml
# must be a string so you have to add a | after extraScrapeConfigs:
# example adds prometheus-blackbox-exporter scrape config
#
# ```{code-block} yaml
# - job_name: 'prometheus-blackbox-exporter'
#   metrics_path: /probe
#   params:
#     module: [http_2xx]
#   static_configs:
#     - targets:
#       - https://example.com
#   relabel_configs:
#     - source_labels: [__address__]
#       target_label: __param_target
#     - source_labels: [__param_target]
#       target_label: instance
#     - target_label: __address__
#       replacement: prometheus-blackbox-exporter:9115
# ```
extraScrapeConfigs: ""

###
# ```{rubric} Alert Relabel
# ```
# ---
# Adds option to add alert_relabel_configs to avoid duplicate alerts in alertmanager
# useful in H/A prometheus with different external labels but the same alerts
#
# ```{code-block} yaml
# alert_relabel_configs:
# - source_labels: [dc]
#   regex: (.+)\d+
#   target_label: dc
# ```
alertRelabelConfigs: {}

####
# ```{rubric} Network Policy
# ```
# ---
# Enable creation of NetworkPolicy resources.
networkPolicy:
  enabled: false

###
# ```{rubric} Force Namespace
# ```
# ---
# Force namespace of namespaced resources
forceNamespace: ""

###
# ```{rubric} Extra Manifests
# ```
# ---
# Extra manifests to deploy as an array
#
# ```{code-block} yaml
# - |
#   apiVersion: v1
#   kind: ConfigMap
#   metadata:
#   labels:
#     name: prometheus-extra
#   data:
#     extra-data: "value"
# ```
extraManifests: []

###
# ```{rubric} Subchart configuration
# ```
# ---
# Configuration of subcharts defined in Chart.yaml
#
# ```{rubric} Alert Manager
# ```
# ---
# alertmanager sub-chart configurable values
# More information available
# [here](https://github.com/prometheus-community/helm-charts/tree/main/charts/alertmanager)
#
# If `alertmanager.enabled: false`{l=yaml}, alertmanager will not be installed
alertmanager:
  enabled: true
  persistence:
    size: 2Gi
    storageClass: csi-lvm-linear

###
# ```{rubric} Kube State Metrics
# ```
# ---
# kube-state-metrics sub-chart configurable values
# More information available
# [here](https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-state-metrics).
#
# If `kube-state-metrics.enabled: false`{l=yaml}, kube-state-metrics sub-chart will not be installed
kube-state-metrics:
  enabled: true

###
# ```{rubric} Prometheus Node Exporter
# ```
# ---
# prometheus-node-exporter sub-chart configurable values
# More information available
# [here](https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus-node-exporter).
#
# If `prometheus-node-exporter.enabled: false`{l=yaml}, node-exporter will not be installed
prometheus-node-exporter:
  enabled: true
  containerSecurityContext:
    allowPrivilegeEscalation: false

###
# ```{rubric} Prometheus Push Gateway
# ```
# ---
# prometheus-pushgateway sub-chart configurable values
# More information is available
# [here](https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus-pushgateway)
#
# If `prometheus-pushgateway.enabled: false, pushgateway will not be installed
prometheus-pushgateway:
  enabled: true
  serviceAnnotations:
    prometheus.io/probe: pushgateway
